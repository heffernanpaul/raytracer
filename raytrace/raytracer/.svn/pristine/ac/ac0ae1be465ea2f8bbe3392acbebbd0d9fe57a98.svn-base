#include "Matte.h"
#include "Windows.h"

// ---------------------------------------------------------------- default constructor

Matte::Matte (void)
	:	Material(),
		ambient_brdf(new Lambertian),
		diffuse_brdf(new Lambertian)
{}



// ---------------------------------------------------------------- copy constructor

Matte::Matte(const Matte& m)
	: 	Material(m)
{
	if(m.ambient_brdf)
		ambient_brdf = m.ambient_brdf->clone(); 
	else  ambient_brdf = NULL;
	
	if(m.diffuse_brdf)
		diffuse_brdf = m.diffuse_brdf->clone(); 
	else  diffuse_brdf = NULL;
}


// ---------------------------------------------------------------- clone

Material*										
Matte::clone(void) const {
	return (new Matte(*this));
}	


// ---------------------------------------------------------------- assignment operator

Matte& 
Matte::operator= (const Matte& rhs) {
	if (this == &rhs)
		return (*this);
		
	Material::operator=(rhs);
	
	if (ambient_brdf) {
		delete ambient_brdf;
		ambient_brdf = NULL;
	}

	if (rhs.ambient_brdf)
		ambient_brdf = rhs.ambient_brdf->clone();
		
	if (diffuse_brdf) {
		delete diffuse_brdf;
		diffuse_brdf = NULL;
	}

	if (rhs.diffuse_brdf)
		diffuse_brdf = rhs.diffuse_brdf->clone();

	return (*this);
}


// ---------------------------------------------------------------- destructor

Matte::~Matte(void) {

	if (ambient_brdf) {
		delete ambient_brdf;
		ambient_brdf = NULL;
	}
	
	if (diffuse_brdf) {
		delete diffuse_brdf;
		diffuse_brdf = NULL;
	}
}


// ---------------------------------------------------------------- shade

RGBColor Matte::direct_shade (ShadeRec& sr) {
	Vector3D 	wo 			= -sr.ray.d;
	RGBColor 	L 			= ambient_brdf->rho(sr, wo) * sr.w.ambient_ptr->L(sr);
	int 		num_lights	= sr.w.lights.size();
	
	for (int j = 0; j < num_lights; j++) {
		RGBColor radiance = 0;
		int num_shadow_rays = sr.w.lights[j]->get_num_shadow_rays ();
		for (int loop = 0;loop<num_shadow_rays;++loop) {
			Vector3D wi = -sr.w.lights[j]->get_direction(sr);    // wi is pointing away from surface
			float ndotwi = sr.normal * wi;
		
			if (ndotwi > 0.0) {
				bool in_shadow = false;
				Ray shadow_ray(sr.hit_point, wi);
				if (sr.w.render_ptr->render_shadow) 
					in_shadow = sr.w.lights[j]->in_shadow (shadow_ray, sr);
				if (!in_shadow) {
					if (!sr.w.lights[j]->isAreaLight ())  // if is not arelight
						radiance += diffuse_brdf->f(sr, wo, wi) * sr.w.lights[j]->L(sr) * ndotwi;
					else 
						radiance += diffuse_brdf->f(sr, wo, wi) * sr.w.lights[j]->L(sr) * sr.w.lights[j]->G (sr) * ndotwi / sr.w.lights[j]->pdf (sr);
				}
			}
		}
		L+=radiance/(float) num_shadow_rays;
	}
	
	return (L);
}

RGBColor Matte::shade(ShadeRec& sr) {
	if (sr.w.render_ptr->render_option == DIRECT_DIFFUSE) {
		return direct_shade (sr);
	}
	else if (sr.w.render_ptr->render_option == PATH_TRACING) {
		Vector3D wi;
		Vector3D wo = -sr.ray.d;
		RGBColor L = 0;
		float pdf;
		RGBColor f = diffuse_brdf->sample_f (sr,wo,wi,pdf);
		float ndotwi = sr.normal*(-wi);
		Ray reflected_ray (sr.hit_point,-wi);
		L = (f*sr.w.render_ptr->tracer_ptr->trace_ray (reflected_ray, sr.depth + 1) * ndotwi / pdf);
		return (L);
	}
}



