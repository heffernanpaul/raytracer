#ifndef __LIGHT__
#define __LIGHT__

#include "Vector3D.h"
#include "RGBColor.h"
#include "Ray.h"


class ShadeRec;


//-------------------------------------------------------------------- class Light

class Light {	
	public:
	
		Light(void);

		Light(float _intensity);
								
		Light(const Light& ls);			

		Light& 								
		operator= (const Light& rhs); 

		virtual Light* 						
		clone(void) const = 0;
		
		virtual 							
		~Light(void);
		
		virtual Vector3D								
		get_direction(const ShadeRec& sr) = 0;				
																
		virtual RGBColor L(const ShadeRec& sr);

		virtual bool in_shadow (const Ray& ray, const ShadeRec& sr) const; //shadow test

		// the following methods are area light related stuff
		bool isAreaLight () const;
		virtual float G(const ShadeRec& sr) const;
		virtual float pdf(const ShadeRec& sr) const;

		void set_num_shadow_rays (int num_sr);
		int get_num_shadow_rays () const;
		void set_intensity (float _intensity);
		float get_intensity () const;
	protected:
		float intensity;
		bool isArea;   // check if this light is arealight
		int num_shadow_rays; // number of shadow rays being sampled
};

inline void Light::set_num_shadow_rays (int num_sr) {
	num_shadow_rays = num_sr;
}

inline int Light::get_num_shadow_rays () const {
	return num_shadow_rays;
}

inline bool Light::isAreaLight () const {
	return isArea;
}

inline float Light::G(const ShadeRec& sr) const { return 0;}

inline float Light::pdf(const ShadeRec& sr) const { return 0;}

inline void Light::set_intensity (float _intensity) { 
	intensity = _intensity;
}

inline float Light::get_intensity () const { 
	return intensity;
}


#endif